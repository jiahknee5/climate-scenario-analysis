<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CLIMADA Hurricane Analysis - Working Maps</title>
    <meta name="description" content="CLIMADA framework for scientific hurricane risk modeling">
    
    <!-- Mapbox GL JS -->
    <script src='https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v3.0.1/mapbox-gl.css' rel='stylesheet' />
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0d1117;
            color: #c9d1d9;
            overflow-x: hidden;
        }
        
        /* Header */
        .header {
            background: #161b22;
            border-bottom: 1px solid #30363d;
            padding: 1rem 2rem;
            position: relative;
            z-index: 1000;
        }
        
        .header h1 {
            font-size: 1.5rem;
            color: #58a6ff;
            margin-bottom: 0.5rem;
        }
        
        .header p {
            color: #8b949e;
            font-size: 0.9rem;
        }
        
        /* Main Layout - Simple side-by-side */
        .main-layout {
            display: flex;
            height: calc(100vh - 100px);
            padding: 1rem;
            gap: 1rem;
        }
        
        /* Each map section takes half the width */
        .map-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #161b22;
            border: 1px solid #30363d;
            border-radius: 6px;
            overflow: hidden;
        }
        
        /* Map header */
        .map-header {
            background: #0d1117;
            padding: 1rem;
            border-bottom: 1px solid #30363d;
        }
        
        .map-header h3 {
            color: #58a6ff;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }
        
        .map-header p {
            color: #8b949e;
            font-size: 0.85rem;
        }
        
        /* Map container - CRITICAL: Fixed dimensions */
        .map-wrapper {
            flex: 1;
            position: relative;
            min-height: 400px;
        }
        
        .map {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
        }
        
        /* Controls */
        .controls {
            background: #0d1117;
            padding: 1rem;
            border-top: 1px solid #30363d;
        }
        
        .control-group {
            margin-bottom: 0.75rem;
        }
        
        .control-group label {
            display: block;
            color: #f0f6fc;
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
        }
        
        .control-group select {
            width: 100%;
            padding: 0.5rem;
            background: #0d1117;
            border: 1px solid #30363d;
            border-radius: 6px;
            color: #c9d1d9;
            font-size: 0.85rem;
        }
        
        /* Loading indicator */
        .loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #161b22;
            padding: 1rem 2rem;
            border-radius: 6px;
            border: 1px solid #30363d;
            z-index: 100;
        }
        
        /* Debug info */
        .debug-panel {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(22, 27, 34, 0.9);
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid #30363d;
            font-size: 0.75rem;
            z-index: 101;
            max-width: 200px;
        }
        
        .debug-panel div {
            margin: 0.25rem 0;
        }
        
        .success { color: #3fb950; }
        .error { color: #f85149; }
        .info { color: #58a6ff; }
        
        /* Mobile responsive */
        @media (max-width: 768px) {
            .main-layout {
                flex-direction: column;
                height: auto;
            }
            
            .map-section {
                height: 500px;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div class="header">
        <h1>CLIMADA Hurricane Analysis</h1>
        <p>Scientific framework for probabilistic hurricane risk modeling</p>
    </div>

    <!-- Main Layout -->
    <div class="main-layout">
        <!-- Left Map: Historical Analysis -->
        <div class="map-section">
            <div class="map-header">
                <h3>Historical Analysis (2010-2019)</h3>
                <p>Observed hurricane tracks and intensities</p>
            </div>
            
            <div class="map-wrapper">
                <div id="map1" class="map"></div>
                <div id="loading1" class="loading">Loading historical data...</div>
                <div id="debug1" class="debug-panel">
                    <div class="info">Map 1 Status:</div>
                    <div id="status1">Initializing...</div>
                </div>
            </div>
            
            <div class="controls">
                <div class="control-group">
                    <label>Hurricane Category</label>
                    <select id="category1">
                        <option value="all">All Categories</option>
                        <option value="major">Major (Cat 3-5)</option>
                        <option value="cat5">Category 5 Only</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Right Map: Climate Projections -->
        <div class="map-section">
            <div class="map-header">
                <h3>Climate Projections (2090s)</h3>
                <p>+4Â°C warming scenario with high emissions</p>
            </div>
            
            <div class="map-wrapper">
                <div id="map2" class="map"></div>
                <div id="loading2" class="loading">Loading projections...</div>
                <div id="debug2" class="debug-panel">
                    <div class="info">Map 2 Status:</div>
                    <div id="status2">Initializing...</div>
                </div>
            </div>
            
            <div class="controls">
                <div class="control-group">
                    <label>Climate Scenario</label>
                    <select id="scenario2">
                        <option value="baseline">Current Trends</option>
                        <option value="2c">+2Â°C (Paris Agreement)</option>
                        <option value="4c" selected>+4Â°C (High Emissions)</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Set Mapbox token
        mapboxgl.accessToken = 'pk.eyJ1IjoiamlhaGtuZWU1IiwiYSI6ImNtZTl3NzRvZjByNXgybnEydHNlc2R6ZHoifQ.8k33LovefbfNKcYWT-VkcA';
        
        console.log('ðŸš€ Starting CLIMADA Hurricane Analysis...');
        console.log('Mapbox GL version:', mapboxgl.version);
        
        let map1, map2;
        let mapsInitialized = false;
        
        // Update debug status
        function updateStatus(mapId, message, type = 'info') {
            const statusEl = document.getElementById(`status${mapId}`);
            if (statusEl) {
                statusEl.innerHTML = `<span class="${type}">${message}</span>`;
            }
            console.log(`[Map ${mapId}] ${message}`);
        }
        
        // Check container dimensions
        function checkContainer(containerId) {
            const container = document.getElementById(containerId);
            if (!container) {
                console.error(`Container ${containerId} not found!`);
                return false;
            }
            
            const rect = container.getBoundingClientRect();
            console.log(`Container ${containerId} dimensions:`, rect.width, 'x', rect.height);
            
            if (rect.width === 0 || rect.height === 0) {
                console.error(`Container ${containerId} has zero dimensions!`);
                return false;
            }
            
            return true;
        }
        
        // Create a single map
        function createMap(containerId, mapNum) {
            updateStatus(mapNum, 'Creating map...', 'info');
            
            if (!checkContainer(containerId)) {
                updateStatus(mapNum, 'Container error!', 'error');
                return null;
            }
            
            try {
                const map = new mapboxgl.Map({
                    container: containerId,
                    style: 'mapbox://styles/mapbox/dark-v11',
                    center: [-75, 30],
                    zoom: 4,
                    attributionControl: false
                });
                
                updateStatus(mapNum, 'Map created, loading...', 'info');
                
                // Handle load event
                map.on('load', () => {
                    updateStatus(mapNum, 'Map loaded!', 'success');
                    document.getElementById(`loading${mapNum}`).style.display = 'none';
                    
                    // Add hurricane data
                    addHurricaneData(map, mapNum);
                    
                    // Hide debug panel after 3 seconds
                    setTimeout(() => {
                        document.getElementById(`debug${mapNum}`).style.display = 'none';
                    }, 3000);
                });
                
                // Handle error event
                map.on('error', (e) => {
                    console.error('Map error:', e);
                    updateStatus(mapNum, 'Map error: ' + (e.error?.message || 'Unknown'), 'error');
                });
                
                return map;
                
            } catch (error) {
                console.error('Exception creating map:', error);
                updateStatus(mapNum, 'Exception: ' + error.message, 'error');
                return null;
            }
        }
        
        // Add hurricane data to map
        function addHurricaneData(map, mapNum) {
            const hurricanes = generateHurricaneData(mapNum === '1' ? 10 : 15);
            
            map.addSource('hurricanes', {
                type: 'geojson',
                data: hurricanes
            });
            
            // Add hurricane tracks
            map.addLayer({
                id: 'hurricane-tracks',
                type: 'line',
                source: 'hurricanes',
                paint: {
                    'line-color': [
                        'case',
                        ['>=', ['get', 'category'], 5], '#ff0000',
                        ['>=', ['get', 'category'], 4], '#ff4500',
                        ['>=', ['get', 'category'], 3], '#ff8c00',
                        ['>=', ['get', 'category'], 2], '#ffd700',
                        '#ffff00'
                    ],
                    'line-width': 3,
                    'line-opacity': 0.8
                }
            });
            
            // Add endpoints
            map.addLayer({
                id: 'hurricane-points',
                type: 'circle',
                source: 'hurricanes',
                paint: {
                    'circle-radius': 5,
                    'circle-color': '#58a6ff',
                    'circle-stroke-color': '#ffffff',
                    'circle-stroke-width': 2
                }
            });
            
            console.log(`Added ${hurricanes.features.length} hurricanes to map ${mapNum}`);
        }
        
        // Generate hurricane data
        function generateHurricaneData(count) {
            const features = [];
            
            for (let i = 0; i < count; i++) {
                const startLng = -85 + Math.random() * 20;
                const startLat = 15 + Math.random() * 15;
                const track = [];
                
                // Generate track points
                for (let j = 0; j < 5; j++) {
                    track.push([
                        startLng + j * 2 + (Math.random() - 0.5),
                        startLat + j * 0.5 + (Math.random() - 0.5)
                    ]);
                }
                
                features.push({
                    type: 'Feature',
                    properties: {
                        name: `Hurricane ${String.fromCharCode(65 + i)}`,
                        category: Math.floor(Math.random() * 5) + 1,
                        year: 2015 + Math.floor(Math.random() * 5)
                    },
                    geometry: {
                        type: 'LineString',
                        coordinates: track
                    }
                });
            }
            
            return {
                type: 'FeatureCollection',
                features: features
            };
        }
        
        // Initialize maps when DOM is ready
        function initializeMaps() {
            if (mapsInitialized) return;
            mapsInitialized = true;
            
            console.log('Initializing maps...');
            
            // Create map 1
            map1 = createMap('map1', '1');
            
            // Create map 2 with slight delay
            setTimeout(() => {
                map2 = createMap('map2', '2');
            }, 500);
            
            // Force resize after creation
            setTimeout(() => {
                if (map1) {
                    map1.resize();
                    console.log('Map 1 resized');
                }
                if (map2) {
                    map2.resize();
                    console.log('Map 2 resized');
                }
            }, 2000);
        }
        
        // Wait for DOM to be fully loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeMaps);
        } else {
            // DOM already loaded
            setTimeout(initializeMaps, 100);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            if (map1) map1.resize();
            if (map2) map2.resize();
        });
    </script>
</body>
</html>